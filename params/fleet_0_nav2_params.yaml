lifecycle_manager_navigation:
  ros__parameters:
    autostart: true
    node_names:
      - planner_server
      - controller_server
      - smoother_server
      - waypoint_follower
      - velocity_smoother
      - recoveries_server
      - bt_navigator

#--------------------------
# Behavior Tree Navigator : Exécute un arbre de comportements (BT) pour gérer la navigation (appel au planner + contrôleur + recovery behaviors).
# --------------------------
bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: <robot_namespace>/base_link
    transform_tolerance: 0.5
    filter_duration: 0.3
    default_nav_to_pose_bt_xml: "$(find-pkg-share nav2_bt_navigator)/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml" # behavior trees location.
    default_nav_through_poses_bt_xml: "$(find-pkg-share nav2_bt_navigator)/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml"
    always_reload_bt_xml: false
    goal_blackboard_id: goal
    goals_blackboard_id: goals
    path_blackboard_id: path
    navigators: ['navigate_to_pose', 'navigate_through_poses']
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    error_code_name_prefixes:
      - assisted_teleop
      - backup
      - compute_path
      - drive_on_heading
      - follow_path
      - nav_thru_poses
      - nav_to_pose
      - spin
      - route
      - wait

#--------------------------
# Controller server : Suivi local du chemin, calcule les vitesses (cmd_vel). (ex. DWBController, RegulatedPurePursuit).
# --------------------------
controller_server:
  ros__parameters:    
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    odom_topic: "/<robot_namespace>/odometry"  

    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1
      movement_time_allowance: 10.0
    goal_checker:
      stateful: true
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: true
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.3
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.3
      min_speed_theta: 0.0
      acc_lim_x: 3.0
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 0
      vtheta_samples: 40
      sim_time: 1.5
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.05
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: true
      stateful: true
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0
    enable_stamped_cmd_vel: false


#--------------------------
# Planner : Génère un chemin global (ex. A*, SmacPlanner) entre la position courante et le goal.
# --------------------------
planner_server:
  ros__parameters:
    expected_planner_frequency: 10.0
    odom_topic: "/<robot_namespace>/odometry"  

    planner_plugins: ["GridBased"] 
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

#--------------------------
# Waypoint Follower : permet d’envoyer une liste de waypoints (missions multi-cibles).
# --------------------------
waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: true
      waypoint_pause_duration: 200



#--------------------------
# Velocity smoother : Filtre/smooth les commandes cmd_vel pour éviter les à-coups.
#--------------------------
velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: false
    feedback: "OPEN_LOOP"

    # Vitesse max / min
    max_velocity: [0.5, 0.0, 2.5]
    min_velocity: [-0.5, 0.0, -2.5]
    deadband_velocity: [0.0, 0.0, 0.0]

    # Accélérations
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]

    # Timeout et odom
    feedback: "CLOSED_LOOP"
    velocity_timeout: 1.0
    odom_topic: "/<robot_namespace>/odometry"
    odom_duration: 0.1

    # Options
    use_realtime_priority: false
    enable_stamped_cmd_vel: false
    
    input_cmd_vel_topic: "cmd_vel_nav"
    output_cmd_vel_topic: "cmd_vel"


#--------------------------
# Smoother server : applique un algorithme de lissage (ex. spline, courbes de Bézier) au chemin global généré par le planner.
#--------------------------
smoother_server:
  ros__parameters:
    use_sim_time: True
    odom_topic: "/<robot_namespace>/odometry"  

    # Liste des plugins actifs
    smoother_plugins: ["simple_smoother"]

    # Paramètres du plugin SimpleSmoother
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0          # tolérance d’écart sur la trajectoire
      do_refinement: True     # active un raffinement itératif
      refinement_num: 2       # nombre d’itérations de raffinement
      refinement_alpha: 0.2   # poids du raffinement (0=faible, 1=fort)
      refinement_ratio: 0.3   # proportion du chemin concernée par le raffinement
    cubic_spline_smoother:
      plugin: "nav2_smoother::CubicSplineSmoother"
      refine_path: True       # permet d’ajouter des points intermédiaires
      spline_order: 3         # ordre du spline (3 = cubique)



#--------------------------
# Global Costmap
# --------------------------
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 5.0
      global_frame: map
      robot_base_frame: <robot_namespace>/base_link
      rolling_window: True
      static_map: True
      width: 15
      height: 15
      resolution: 0.175
      robot_radius: 0.5
      #footprint: "[[0.3, 0.3], [0.3, -0.3], [-0.3, -0.3], [-0.3, 0.3]]"
      restore_cleared_footprint: True
      track_unknown_space: True
      trinary_costmap: False
      transform_tolerance: 0.5
      plugins: ["static_layer","inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_topic: /<robot_namespace>/traversability_global_occupancygrid
        map_subscribe_transient_local: True
        footprint_clearing_enabled: True
        enabled: True
        static_map: False
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.30
      always_send_full_costmap: True      

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: true
      global_frame: map
      robot_base_frame: <robot_namespace>/base_link      
      update_frequency: 1.0
      publish_frequency: 1.0
      width: 100
      height: 100
      resolution: 0.175
      origin_x: -0.0
      origin_y: -0.0
      rolling_window: false
      always_send_full_costmap: True
      track_unknown_space: True
      trinary_costmap: False
      plugins: ["static_layer", "inflation_layer"]

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_topic: "/<robot_namespace>/traversability_global_occupancygrid"
        # map_topic: "/global_traversability_map"
        subscribe_to_updates: false
        update_frequency: 1.0
        map_subscribe_transient_local: false # false or true depending on the publisher qos we get when we do ros2 topic info -v

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.5


# # --------------------------
# # Local Costmap
# # --------------------------
# local_costmap:
#   local_costmap:
#     ros__parameters:
#       use_sim_time: true      
#       global_frame: <robot_namespace>
#       robot_base_frame: <robot_namespace>/base_link
#       map_subscribe_transient_local: true
#       always_send_full_costmap: True

#       update_frequency: 5.0
#       publish_frequency: 5.0
#       rolling_window: true
#       plugins: ["static_layer", "inflation_layer"]

#       static_layer:
#         plugin: "nav2_costmap_2d::StaticLayer"
#         map_topic: "/<robot_namespace>/traversability_occupancygrid"
#         subscribe_to_updates: false
#         update_frequency: 5.0

#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         inflation_radius: 0.5






#--------------------------
# Behavior : Serveur d’actions génériques pour exécuter certains comportements (ex. attendre, suiveur de lignes).
# --------------------------
behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_costmap_topic: global_costmap/costmap_raw
    global_footprint_topic: global_costmap/published_footprint

    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "wait", "assisted_teleop"]
    spin:
      plugin: "nav2_behaviors::Spin" 
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading" 
    wait:
      plugin: "nav2_behaviors::Wait" 
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop" 
    local_frame: <robot_namespace>/base_link
    global_frame: map
    robot_base_frame: <robot_namespace>/base_link
    transform_timeout: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2
    enable_stamped_cmd_vel: false    

